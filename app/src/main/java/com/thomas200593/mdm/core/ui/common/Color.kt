package com.thomas200593.mdm.core.ui.common

import android.graphics.Color.argb
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.ui.graphics.Color

object Color {
    object Light {
        private object ContrastDefault {
            val primaryLight = Color(0xFF0D6680)
            val onPrimaryLight = Color(0xFFFFFFFF)
            val primaryContainerLight = Color(0xFFBAEAFF)
            val onPrimaryContainerLight = Color(0xFF004D62)
            val secondaryLight = Color(0xFF4C616B)
            val onSecondaryLight = Color(0xFFFFFFFF)
            val secondaryContainerLight = Color(0xFFCFE6F1)
            val onSecondaryContainerLight = Color(0xFF354A53)
            val tertiaryLight = Color(0xFF5C5B7E)
            val onTertiaryLight = Color(0xFFFFFFFF)
            val tertiaryContainerLight = Color(0xFFE2DFFF)
            val onTertiaryContainerLight = Color(0xFF444465)
            val errorLight = Color(0xFFBA1A1A)
            val onErrorLight = Color(0xFFFFFFFF)
            val errorContainerLight = Color(0xFFFFDAD6)
            val onErrorContainerLight = Color(0xFF93000A)
            val backgroundLight = Color(0xFFF5FAFD)
            val onBackgroundLight = Color(0xFF171C1F)
            val surfaceLight = Color(0xFFF5FAFD)
            val onSurfaceLight = Color(0xFF171C1F)
            val surfaceVariantLight = Color(0xFFDCE4E8)
            val onSurfaceVariantLight = Color(0xFF40484C)
            val outlineLight = Color(0xFF70787D)
            val outlineVariantLight = Color(0xFFC0C8CC)
            val scrimLight = Color(0xFF000000)
            val inverseSurfaceLight = Color(0xFF2C3134)
            val inverseOnSurfaceLight = Color(0xFFEDF1F5)
            val inversePrimaryLight = Color(0xFF89D0EE)
            val surfaceDimLight = Color(0xFFD6DBDE)
            val surfaceBrightLight = Color(0xFFF5FAFD)
            val surfaceContainerLowestLight = Color(0xFFFFFFFF)
            val surfaceContainerLowLight = Color(0xFFF0F4F7)
            val surfaceContainerLight = Color(0xFFEAEEF2)
            val surfaceContainerHighLight = Color(0xFFE4E9EC)
            val surfaceContainerHighestLight = Color(0xFFDEE3E6)
        }
        private object ContrastMedium {
            val primaryLightMediumContrast = Color(0xFF003B4C)
            val onPrimaryLightMediumContrast = Color(0xFFFFFFFF)
            val primaryContainerLightMediumContrast = Color(0xFF277590)
            val onPrimaryContainerLightMediumContrast = Color(0xFFFFFFFF)
            val secondaryLightMediumContrast = Color(0xFF243942)
            val onSecondaryLightMediumContrast = Color(0xFFFFFFFF)
            val secondaryContainerLightMediumContrast = Color(0xFF5B707A)
            val onSecondaryContainerLightMediumContrast = Color(0xFFFFFFFF)
            val tertiaryLightMediumContrast = Color(0xFF333353)
            val onTertiaryLightMediumContrast = Color(0xFFFFFFFF)
            val tertiaryContainerLightMediumContrast = Color(0xFF6A6A8D)
            val onTertiaryContainerLightMediumContrast = Color(0xFFFFFFFF)
            val errorLightMediumContrast = Color(0xFF740006)
            val onErrorLightMediumContrast = Color(0xFFFFFFFF)
            val errorContainerLightMediumContrast = Color(0xFFCF2C27)
            val onErrorContainerLightMediumContrast = Color(0xFFFFFFFF)
            val backgroundLightMediumContrast = Color(0xFFF5FAFD)
            val onBackgroundLightMediumContrast = Color(0xFF171C1F)
            val surfaceLightMediumContrast = Color(0xFFF5FAFD)
            val onSurfaceLightMediumContrast = Color(0xFF0D1214)
            val surfaceVariantLightMediumContrast = Color(0xFFDCE4E8)
            val onSurfaceVariantLightMediumContrast = Color(0xFF2F373B)
            val outlineLightMediumContrast = Color(0xFF4C5458)
            val outlineVariantLightMediumContrast = Color(0xFF666E73)
            val scrimLightMediumContrast = Color(0xFF000000)
            val inverseSurfaceLightMediumContrast = Color(0xFF2C3134)
            val inverseOnSurfaceLightMediumContrast = Color(0xFFEDF1F5)
            val inversePrimaryLightMediumContrast = Color(0xFF89D0EE)
            val surfaceDimLightMediumContrast = Color(0xFFC2C7CA)
            val surfaceBrightLightMediumContrast = Color(0xFFF5FAFD)
            val surfaceContainerLowestLightMediumContrast = Color(0xFFFFFFFF)
            val surfaceContainerLowLightMediumContrast = Color(0xFFF0F4F7)
            val surfaceContainerLightMediumContrast = Color(0xFFE4E9EC)
            val surfaceContainerHighLightMediumContrast = Color(0xFFD9DDE1)
            val surfaceContainerHighestLightMediumContrast = Color(0xFFCDD2D5)
        }
        private object ContrastHigh {
            val primaryLightHighContrast = Color(0xFF00313F)
            val onPrimaryLightHighContrast = Color(0xFFFFFFFF)
            val primaryContainerLightHighContrast = Color(0xFF005066)
            val onPrimaryContainerLightHighContrast = Color(0xFFFFFFFF)
            val secondaryLightHighContrast = Color(0xFF1A2F38)
            val onSecondaryLightHighContrast = Color(0xFFFFFFFF)
            val secondaryContainerLightHighContrast = Color(0xFF374C55)
            val onSecondaryContainerLightHighContrast = Color(0xFFFFFFFF)
            val tertiaryLightHighContrast = Color(0xFF292948)
            val onTertiaryLightHighContrast = Color(0xFFFFFFFF)
            val tertiaryContainerLightHighContrast = Color(0xFF464667)
            val onTertiaryContainerLightHighContrast = Color(0xFFFFFFFF)
            val errorLightHighContrast = Color(0xFF600004)
            val onErrorLightHighContrast = Color(0xFFFFFFFF)
            val errorContainerLightHighContrast = Color(0xFF98000A)
            val onErrorContainerLightHighContrast = Color(0xFFFFFFFF)
            val backgroundLightHighContrast = Color(0xFFF5FAFD)
            val onBackgroundLightHighContrast = Color(0xFF171C1F)
            val surfaceLightHighContrast = Color(0xFFF5FAFD)
            val onSurfaceLightHighContrast = Color(0xFF000000)
            val surfaceVariantLightHighContrast = Color(0xFFDCE4E8)
            val onSurfaceVariantLightHighContrast = Color(0xFF000000)
            val outlineLightHighContrast = Color(0xFF252D31)
            val outlineVariantLightHighContrast = Color(0xFF424A4E)
            val scrimLightHighContrast = Color(0xFF000000)
            val inverseSurfaceLightHighContrast = Color(0xFF2C3134)
            val inverseOnSurfaceLightHighContrast = Color(0xFFFFFFFF)
            val inversePrimaryLightHighContrast = Color(0xFF89D0EE)
            val surfaceDimLightHighContrast = Color(0xFFB4B9BD)
            val surfaceBrightLightHighContrast = Color(0xFFF5FAFD)
            val surfaceContainerLowestLightHighContrast = Color(0xFFFFFFFF)
            val surfaceContainerLowLightHighContrast = Color(0xFFEDF1F5)
            val surfaceContainerLightHighContrast = Color(0xFFDEE3E6)
            val surfaceContainerHighLightHighContrast = Color(0xFFD0D5D8)
            val surfaceContainerHighestLightHighContrast = Color(0xFFC2C7CA)
        }
        val lightScrim = argb(0xe6, 0xFF, 0xFF, 0xFF)
        val schemeContrastDefault = lightColorScheme(
            primary = ContrastDefault.primaryLight,
            onPrimary = ContrastDefault.onPrimaryLight,
            primaryContainer = ContrastDefault.primaryContainerLight,
            onPrimaryContainer = ContrastDefault.onPrimaryContainerLight,
            inversePrimary = ContrastDefault.inversePrimaryLight,
            secondary = ContrastDefault.secondaryLight,
            onSecondary = ContrastDefault.onSecondaryLight,
            secondaryContainer = ContrastDefault.secondaryContainerLight,
            onSecondaryContainer = ContrastDefault.onSecondaryContainerLight,
            tertiary = ContrastDefault.tertiaryLight,
            onTertiary = ContrastDefault.onTertiaryLight,
            tertiaryContainer = ContrastDefault.tertiaryContainerLight,
            onTertiaryContainer = ContrastDefault.onTertiaryContainerLight,
            background = ContrastDefault.backgroundLight,
            onBackground = ContrastDefault.onBackgroundLight,
            surface = ContrastDefault.surfaceLight,
            onSurface = ContrastDefault.onSurfaceLight,
            surfaceVariant = ContrastDefault.surfaceVariantLight,
            onSurfaceVariant = ContrastDefault.onSurfaceVariantLight,
            surfaceTint = Color.Unspecified,
            inverseSurface = ContrastDefault.inverseSurfaceLight,
            inverseOnSurface = ContrastDefault.inverseOnSurfaceLight,
            error = ContrastDefault.errorLight,
            onError = ContrastDefault.onErrorLight,
            errorContainer = ContrastDefault.errorContainerLight,
            onErrorContainer = ContrastDefault.onErrorContainerLight,
            outline = ContrastDefault.outlineLight,
            outlineVariant = ContrastDefault.outlineVariantLight,
            scrim = ContrastDefault.scrimLight,
            surfaceBright = ContrastDefault.surfaceBrightLight,
            surfaceContainer = ContrastDefault.surfaceContainerLight,
            surfaceContainerHigh = ContrastDefault.surfaceContainerHighLight,
            surfaceContainerHighest = ContrastDefault.surfaceContainerHighestLight,
            surfaceContainerLow = ContrastDefault.surfaceContainerLowLight,
            surfaceContainerLowest = ContrastDefault.surfaceContainerLowestLight,
            surfaceDim = ContrastDefault.surfaceDimLight
        )
        val schemeContrastMedium = lightColorScheme(
            primary = ContrastMedium.primaryLightMediumContrast,
            onPrimary = ContrastMedium.onPrimaryLightMediumContrast,
            primaryContainer = ContrastMedium.primaryContainerLightMediumContrast,
            onPrimaryContainer = ContrastMedium.onPrimaryContainerLightMediumContrast,
            inversePrimary = ContrastMedium.inversePrimaryLightMediumContrast,
            secondary = ContrastMedium.secondaryLightMediumContrast,
            onSecondary = ContrastMedium.onSecondaryLightMediumContrast,
            secondaryContainer = ContrastMedium.secondaryContainerLightMediumContrast,
            onSecondaryContainer = ContrastMedium.onSecondaryContainerLightMediumContrast,
            tertiary = ContrastMedium.tertiaryLightMediumContrast,
            onTertiary = ContrastMedium.onTertiaryLightMediumContrast,
            tertiaryContainer = ContrastMedium.tertiaryContainerLightMediumContrast,
            onTertiaryContainer = ContrastMedium.onTertiaryContainerLightMediumContrast,
            background = ContrastMedium.backgroundLightMediumContrast,
            onBackground = ContrastMedium.onBackgroundLightMediumContrast,
            surface = ContrastMedium.surfaceLightMediumContrast,
            onSurface = ContrastMedium.onSurfaceLightMediumContrast,
            surfaceVariant = ContrastMedium.surfaceVariantLightMediumContrast,
            onSurfaceVariant = ContrastMedium.onSurfaceVariantLightMediumContrast,
            surfaceTint = Color.Unspecified,
            inverseSurface = ContrastMedium.inverseSurfaceLightMediumContrast,
            inverseOnSurface = ContrastMedium.inverseOnSurfaceLightMediumContrast,
            error = ContrastMedium.errorLightMediumContrast,
            onError = ContrastMedium.onErrorLightMediumContrast,
            errorContainer = ContrastMedium.errorContainerLightMediumContrast,
            onErrorContainer = ContrastMedium.onErrorContainerLightMediumContrast,
            outline = ContrastMedium.outlineLightMediumContrast,
            outlineVariant = ContrastMedium.outlineVariantLightMediumContrast,
            scrim = ContrastMedium.scrimLightMediumContrast,
            surfaceBright = ContrastMedium.surfaceBrightLightMediumContrast,
            surfaceContainer = ContrastMedium.surfaceContainerLightMediumContrast,
            surfaceContainerHigh = ContrastMedium.surfaceContainerHighLightMediumContrast,
            surfaceContainerHighest = ContrastMedium.surfaceContainerHighestLightMediumContrast,
            surfaceContainerLow = ContrastMedium.surfaceContainerLowLightMediumContrast,
            surfaceContainerLowest = ContrastMedium.surfaceContainerLowestLightMediumContrast,
            surfaceDim = ContrastMedium.surfaceDimLightMediumContrast
        )
        val schemeContrastHigh = lightColorScheme(
            primary = ContrastHigh.primaryLightHighContrast,
            onPrimary = ContrastHigh.onPrimaryLightHighContrast,
            primaryContainer = ContrastHigh.primaryContainerLightHighContrast,
            onPrimaryContainer = ContrastHigh.onPrimaryContainerLightHighContrast,
            inversePrimary = ContrastHigh.inversePrimaryLightHighContrast,
            secondary = ContrastHigh.secondaryLightHighContrast,
            onSecondary = ContrastHigh.onSecondaryLightHighContrast,
            secondaryContainer = ContrastHigh.secondaryContainerLightHighContrast,
            onSecondaryContainer = ContrastHigh.onSecondaryContainerLightHighContrast,
            tertiary = ContrastHigh.tertiaryLightHighContrast,
            onTertiary = ContrastHigh.onTertiaryLightHighContrast,
            tertiaryContainer = ContrastHigh.tertiaryContainerLightHighContrast,
            onTertiaryContainer = ContrastHigh.onTertiaryContainerLightHighContrast,
            background = ContrastHigh.backgroundLightHighContrast,
            onBackground = ContrastHigh.onBackgroundLightHighContrast,
            surface = ContrastHigh.surfaceLightHighContrast,
            onSurface = ContrastHigh.onSurfaceLightHighContrast,
            surfaceVariant = ContrastHigh.surfaceVariantLightHighContrast,
            onSurfaceVariant = ContrastHigh.onSurfaceVariantLightHighContrast,
            surfaceTint = Color.Unspecified,
            inverseSurface = ContrastHigh.inverseSurfaceLightHighContrast,
            inverseOnSurface = ContrastHigh.inverseOnSurfaceLightHighContrast,
            error = ContrastHigh.errorLightHighContrast,
            onError = ContrastHigh.onErrorLightHighContrast,
            errorContainer = ContrastHigh.errorContainerLightHighContrast,
            onErrorContainer = ContrastHigh.onErrorContainerLightHighContrast,
            outline = ContrastHigh.outlineLightHighContrast,
            outlineVariant = ContrastHigh.outlineVariantLightHighContrast,
            scrim = ContrastHigh.scrimLightHighContrast,
            surfaceBright = ContrastHigh.surfaceBrightLightHighContrast,
            surfaceContainer = ContrastHigh.surfaceContainerLightHighContrast,
            surfaceContainerHigh = ContrastHigh.surfaceContainerHighLightHighContrast,
            surfaceContainerHighest = ContrastHigh.surfaceContainerHighestLightHighContrast,
            surfaceContainerLow = ContrastHigh.surfaceContainerLowLightHighContrast,
            surfaceContainerLowest = ContrastHigh.surfaceContainerLowestLightHighContrast,
            surfaceDim = ContrastHigh.surfaceDimLightHighContrast
        )
    }
    object Dark {
        private object ContrastDefault {
            val primaryDark = Color(0xFF89D0EE)
            val onPrimaryDark = Color(0xFF003545)
            val primaryContainerDark = Color(0xFF004D62)
            val onPrimaryContainerDark = Color(0xFFBAEAFF)
            val secondaryDark = Color(0xFFB4CAD5)
            val onSecondaryDark = Color(0xFF1E333C)
            val secondaryContainerDark = Color(0xFF354A53)
            val onSecondaryContainerDark = Color(0xFFCFE6F1)
            val tertiaryDark = Color(0xFFC5C3EA)
            val onTertiaryDark = Color(0xFF2D2D4D)
            val tertiaryContainerDark = Color(0xFF444465)
            val onTertiaryContainerDark = Color(0xFFE2DFFF)
            val errorDark = Color(0xFFFFB4AB)
            val onErrorDark = Color(0xFF690005)
            val errorContainerDark = Color(0xFF93000A)
            val onErrorContainerDark = Color(0xFFFFDAD6)
            val backgroundDark = Color(0xFF0F1417)
            val onBackgroundDark = Color(0xFFDEE3E6)
            val surfaceDark = Color(0xFF0F1417)
            val onSurfaceDark = Color(0xFFDEE3E6)
            val surfaceVariantDark = Color(0xFF40484C)
            val onSurfaceVariantDark = Color(0xFFC0C8CC)
            val outlineDark = Color(0xFF8A9296)
            val outlineVariantDark = Color(0xFF40484C)
            val scrimDark = Color(0xFF000000)
            val inverseSurfaceDark = Color(0xFFDEE3E6)
            val inverseOnSurfaceDark = Color(0xFF2C3134)
            val inversePrimaryDark = Color(0xFF0D6680)
            val surfaceDimDark = Color(0xFF0F1417)
            val surfaceBrightDark = Color(0xFF353A3D)
            val surfaceContainerLowestDark = Color(0xFF0A0F11)
            val surfaceContainerLowDark = Color(0xFF171C1F)
            val surfaceContainerDark = Color(0xFF1B2023)
            val surfaceContainerHighDark = Color(0xFF252B2D)
            val surfaceContainerHighestDark = Color(0xFF303638)
        }
        private object ContrastMedium {
            val primaryDarkMediumContrast = Color(0xFFA9E5FF)
            val onPrimaryDarkMediumContrast = Color(0xFF002A36)
            val primaryContainerDarkMediumContrast = Color(0xFF529AB5)
            val onPrimaryContainerDarkMediumContrast = Color(0xFF000000)
            val secondaryDarkMediumContrast = Color(0xFFC9E0EB)
            val onSecondaryDarkMediumContrast = Color(0xFF132831)
            val secondaryContainerDarkMediumContrast = Color(0xFF7E949E)
            val onSecondaryContainerDarkMediumContrast = Color(0xFF000000)
            val tertiaryDarkMediumContrast = Color(0xFFDBD9FF)
            val onTertiaryDarkMediumContrast = Color(0xFF222241)
            val tertiaryContainerDarkMediumContrast = Color(0xFF8E8DB2)
            val onTertiaryContainerDarkMediumContrast = Color(0xFF000000)
            val errorDarkMediumContrast = Color(0xFFFFD2CC)
            val onErrorDarkMediumContrast = Color(0xFF540003)
            val errorContainerDarkMediumContrast = Color(0xFFFF5449)
            val onErrorContainerDarkMediumContrast = Color(0xFF000000)
            val backgroundDarkMediumContrast = Color(0xFF0F1417)
            val onBackgroundDarkMediumContrast = Color(0xFFDEE3E6)
            val surfaceDarkMediumContrast = Color(0xFF0F1417)
            val onSurfaceDarkMediumContrast = Color(0xFFFFFFFF)
            val surfaceVariantDarkMediumContrast = Color(0xFF40484C)
            val onSurfaceVariantDarkMediumContrast = Color(0xFFD5DDE2)
            val outlineDarkMediumContrast = Color(0xFFABB3B8)
            val outlineVariantDarkMediumContrast = Color(0xFF899196)
            val scrimDarkMediumContrast = Color(0xFF000000)
            val inverseSurfaceDarkMediumContrast = Color(0xFFDEE3E6)
            val inverseOnSurfaceDarkMediumContrast = Color(0xFF262B2D)
            val inversePrimaryDarkMediumContrast = Color(0xFF004F64)
            val surfaceDimDarkMediumContrast = Color(0xFF0F1417)
            val surfaceBrightDarkMediumContrast = Color(0xFF404548)
            val surfaceContainerLowestDarkMediumContrast = Color(0xFF04080A)
            val surfaceContainerLowDarkMediumContrast = Color(0xFF191E21)
            val surfaceContainerDarkMediumContrast = Color(0xFF23292B)
            val surfaceContainerHighDarkMediumContrast = Color(0xFF2E3336)
            val surfaceContainerHighestDarkMediumContrast = Color(0xFF393E41)
        }
        private object ContrastHigh {
            val primaryDarkHighContrast = Color(0xFFDDF4FF)
            val onPrimaryDarkHighContrast = Color(0xFF000000)
            val primaryContainerDarkHighContrast = Color(0xFF85CCEA)
            val onPrimaryContainerDarkHighContrast = Color(0xFF000D13)
            val secondaryDarkHighContrast = Color(0xFFDDF4FF)
            val onSecondaryDarkHighContrast = Color(0xFF000000)
            val secondaryContainerDarkHighContrast = Color(0xFFB0C6D1)
            val onSecondaryContainerDarkHighContrast = Color(0xFF000D13)
            val tertiaryDarkHighContrast = Color(0xFFF1EEFF)
            val onTertiaryDarkHighContrast = Color(0xFF000000)
            val tertiaryContainerDarkHighContrast = Color(0xFFC1BFE6)
            val onTertiaryContainerDarkHighContrast = Color(0xFF080726)
            val errorDarkHighContrast = Color(0xFFFFECE9)
            val onErrorDarkHighContrast = Color(0xFF000000)
            val errorContainerDarkHighContrast = Color(0xFFFFAEA4)
            val onErrorContainerDarkHighContrast = Color(0xFF220001)
            val backgroundDarkHighContrast = Color(0xFF0F1417)
            val onBackgroundDarkHighContrast = Color(0xFFDEE3E6)
            val surfaceDarkHighContrast = Color(0xFF0F1417)
            val onSurfaceDarkHighContrast = Color(0xFFFFFFFF)
            val surfaceVariantDarkHighContrast = Color(0xFF40484C)
            val onSurfaceVariantDarkHighContrast = Color(0xFFFFFFFF)
            val outlineDarkHighContrast = Color(0xFFE9F1F6)
            val outlineVariantDarkHighContrast = Color(0xFFBCC4C8)
            val scrimDarkHighContrast = Color(0xFF000000)
            val inverseSurfaceDarkHighContrast = Color(0xFFDEE3E6)
            val inverseOnSurfaceDarkHighContrast = Color(0xFF000000)
            val inversePrimaryDarkHighContrast = Color(0xFF004F64)
            val surfaceDimDarkHighContrast = Color(0xFF0F1417)
            val surfaceBrightDarkHighContrast = Color(0xFF4C5154)
            val surfaceContainerLowestDarkHighContrast = Color(0xFF000000)
            val surfaceContainerLowDarkHighContrast = Color(0xFF1B2023)
            val surfaceContainerDarkHighContrast = Color(0xFF2C3134)
            val surfaceContainerHighDarkHighContrast = Color(0xFF373C3F)
            val surfaceContainerHighestDarkHighContrast = Color(0xFF42484A)
        }
        val darkScrim = argb(0x80, 0x1b, 0x1b, 0x1b)
        val schemeContrastDefault = darkColorScheme(
            primary = ContrastDefault.primaryDark,
            onPrimary = ContrastDefault.onPrimaryDark,
            primaryContainer = ContrastDefault.primaryContainerDark,
            onPrimaryContainer = ContrastDefault.onPrimaryContainerDark,
            inversePrimary = ContrastDefault.inversePrimaryDark,
            secondary = ContrastDefault.secondaryDark,
            onSecondary = ContrastDefault.onSecondaryDark,
            secondaryContainer = ContrastDefault.secondaryContainerDark,
            onSecondaryContainer = ContrastDefault.onSecondaryContainerDark,
            tertiary = ContrastDefault.tertiaryDark,
            onTertiary = ContrastDefault.onTertiaryDark,
            tertiaryContainer = ContrastDefault.tertiaryContainerDark,
            onTertiaryContainer = ContrastDefault.onTertiaryContainerDark,
            background = ContrastDefault.backgroundDark,
            onBackground = ContrastDefault.onBackgroundDark,
            surface = ContrastDefault.surfaceDark,
            onSurface = ContrastDefault.onSurfaceDark,
            surfaceVariant = ContrastDefault.surfaceVariantDark,
            onSurfaceVariant = ContrastDefault.onSurfaceVariantDark,
            surfaceTint = Color.Unspecified,
            inverseSurface = ContrastDefault.inverseSurfaceDark,
            inverseOnSurface = ContrastDefault.inverseOnSurfaceDark,
            error = ContrastDefault.errorDark,
            onError = ContrastDefault.onErrorDark,
            errorContainer = ContrastDefault.errorContainerDark,
            onErrorContainer = ContrastDefault.onErrorContainerDark,
            outline = ContrastDefault.outlineDark,
            outlineVariant = ContrastDefault.outlineVariantDark,
            scrim = ContrastDefault.scrimDark,
            surfaceBright = ContrastDefault.surfaceBrightDark,
            surfaceContainer = ContrastDefault.surfaceContainerDark,
            surfaceContainerHigh = ContrastDefault.surfaceContainerHighDark,
            surfaceContainerHighest = ContrastDefault.surfaceContainerHighestDark,
            surfaceContainerLow = ContrastDefault.surfaceContainerLowDark,
            surfaceContainerLowest = ContrastDefault.surfaceContainerLowestDark,
            surfaceDim = ContrastDefault.surfaceDimDark
        )
        val schemeContrastMedium = darkColorScheme(
            primary = ContrastMedium.primaryDarkMediumContrast,
            onPrimary = ContrastMedium.onPrimaryDarkMediumContrast,
            primaryContainer = ContrastMedium.primaryContainerDarkMediumContrast,
            onPrimaryContainer = ContrastMedium.onPrimaryContainerDarkMediumContrast,
            inversePrimary = ContrastMedium.inversePrimaryDarkMediumContrast,
            secondary = ContrastMedium.secondaryDarkMediumContrast,
            onSecondary = ContrastMedium.onSecondaryDarkMediumContrast,
            secondaryContainer = ContrastMedium.secondaryContainerDarkMediumContrast,
            onSecondaryContainer = ContrastMedium.onSecondaryContainerDarkMediumContrast,
            tertiary = ContrastMedium.tertiaryDarkMediumContrast,
            onTertiary = ContrastMedium.onTertiaryDarkMediumContrast,
            tertiaryContainer = ContrastMedium.tertiaryContainerDarkMediumContrast,
            onTertiaryContainer = ContrastMedium.onTertiaryContainerDarkMediumContrast,
            background = ContrastMedium.backgroundDarkMediumContrast,
            onBackground = ContrastMedium.onBackgroundDarkMediumContrast,
            surface = ContrastMedium.surfaceDarkMediumContrast,
            onSurface = ContrastMedium.onSurfaceDarkMediumContrast,
            surfaceVariant = ContrastMedium.surfaceVariantDarkMediumContrast,
            onSurfaceVariant = ContrastMedium.onSurfaceVariantDarkMediumContrast,
            surfaceTint = Color.Unspecified,
            inverseSurface = ContrastMedium.inverseSurfaceDarkMediumContrast,
            inverseOnSurface = ContrastMedium.inverseOnSurfaceDarkMediumContrast,
            error = ContrastMedium.errorDarkMediumContrast,
            onError = ContrastMedium.onErrorDarkMediumContrast,
            errorContainer = ContrastMedium.errorContainerDarkMediumContrast,
            onErrorContainer = ContrastMedium.onErrorContainerDarkMediumContrast,
            outline = ContrastMedium.outlineDarkMediumContrast,
            outlineVariant = ContrastMedium.outlineVariantDarkMediumContrast,
            scrim = ContrastMedium.scrimDarkMediumContrast,
            surfaceBright = ContrastMedium.surfaceBrightDarkMediumContrast,
            surfaceContainer = ContrastMedium.surfaceContainerDarkMediumContrast,
            surfaceContainerHigh = ContrastMedium.surfaceContainerHighDarkMediumContrast,
            surfaceContainerHighest = ContrastMedium.surfaceContainerHighestDarkMediumContrast,
            surfaceContainerLow = ContrastMedium.surfaceContainerLowDarkMediumContrast,
            surfaceContainerLowest = ContrastMedium.surfaceContainerLowestDarkMediumContrast,
            surfaceDim = ContrastMedium.surfaceDimDarkMediumContrast
        )
        val schemeContrastHigh = darkColorScheme(
            primary = ContrastHigh.primaryDarkHighContrast,
            onPrimary = ContrastHigh.onPrimaryDarkHighContrast,
            primaryContainer = ContrastHigh.primaryContainerDarkHighContrast,
            onPrimaryContainer = ContrastHigh.onPrimaryContainerDarkHighContrast,
            inversePrimary = ContrastHigh.inversePrimaryDarkHighContrast,
            secondary = ContrastHigh.secondaryDarkHighContrast,
            onSecondary = ContrastHigh.onSecondaryDarkHighContrast,
            secondaryContainer = ContrastHigh.secondaryContainerDarkHighContrast,
            onSecondaryContainer = ContrastHigh.onSecondaryContainerDarkHighContrast,
            tertiary = ContrastHigh.tertiaryDarkHighContrast,
            onTertiary = ContrastHigh.onTertiaryDarkHighContrast,
            tertiaryContainer = ContrastHigh.tertiaryContainerDarkHighContrast,
            onTertiaryContainer = ContrastHigh.onTertiaryContainerDarkHighContrast,
            background = ContrastHigh.backgroundDarkHighContrast,
            onBackground = ContrastHigh.onBackgroundDarkHighContrast,
            surface = ContrastHigh.surfaceDarkHighContrast,
            onSurface = ContrastHigh.onSurfaceDarkHighContrast,
            surfaceVariant = ContrastHigh.surfaceVariantDarkHighContrast,
            onSurfaceVariant = ContrastHigh.onSurfaceVariantDarkHighContrast,
            surfaceTint = Color.Unspecified,
            inverseSurface = ContrastHigh.inverseSurfaceDarkHighContrast,
            inverseOnSurface = ContrastHigh.inverseOnSurfaceDarkHighContrast,
            error = ContrastHigh.errorDarkHighContrast,
            onError = ContrastHigh.onErrorDarkHighContrast,
            errorContainer = ContrastHigh.errorContainerDarkHighContrast,
            onErrorContainer = ContrastHigh.onErrorContainerDarkHighContrast,
            outline = ContrastHigh.outlineDarkHighContrast,
            outlineVariant = ContrastHigh.outlineVariantDarkHighContrast,
            scrim = ContrastHigh.scrimDarkHighContrast,
            surfaceBright = ContrastHigh.surfaceBrightDarkHighContrast,
            surfaceContainer = ContrastHigh.surfaceContainerDarkHighContrast,
            surfaceContainerHigh = ContrastHigh.surfaceContainerHighDarkHighContrast,
            surfaceContainerHighest = ContrastHigh.surfaceContainerHighestDarkHighContrast,
            surfaceContainerLow = ContrastHigh.surfaceContainerLowDarkHighContrast,
            surfaceContainerLowest = ContrastHigh.surfaceContainerLowestDarkHighContrast,
            surfaceDim = ContrastHigh.surfaceDimDarkHighContrast
        )
    }
}